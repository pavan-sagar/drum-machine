{"version":3,"sources":["logo.svg","components/Drumpad.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Drumpad","props","q_btn_ref","React","createRef","state","soundInfo","Q","name","url","W","E","A","S","D","Z","X","C","clickID","buttonIsActive","handleKeyPress","bind","e","this","power","key","includes","String","soundKey","toUpperCase","target","innerHTML","incrementedClickID","Number","setState","setsoundname","soundName","audio","Audio","volume","play","className","onKeyPress","onClick","Component","Display","power_slider","displayValue","soundname","togglePowerSlider","displayVolumeLevel","setPower","setpower","value","setvolume","setTimeout","prevProp","prevState","class","type","min","max","step","onChange","disabled","App","setSoundName","setVolume","input","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d810a463.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport \"../styles/Drumpad.css\";\r\n\r\nexport class Drumpad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.q_btn_ref = React.createRef();\r\n\r\n    this.state = {\r\n      soundInfo: {\r\n        Q: {\r\n          name: \"Heater 1\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\r\n        },\r\n        W: {\r\n          name: \"Heater 2\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\r\n        },\r\n        E: {\r\n          name: \"Heater 3\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\r\n        },\r\n        A: {\r\n          name: \"Heater 4\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\r\n        },\r\n        S: {\r\n          name: \"Clap\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\r\n        },\r\n        D: {\r\n          name: \"Open HH\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\r\n        },\r\n        Z: {\r\n          name: `Kick n' Hat`,\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\r\n        },\r\n        X: {\r\n          name: \"Kick\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\r\n        },\r\n        C: {\r\n          name: \"Closed HH\",\r\n          url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\r\n        },\r\n      },\r\n      clickID: 0,\r\n      buttonIsActive: false,\r\n    };\r\n\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    /*1.We send the sound name tied to each button/key from this state to the Parent callback to update Parent state\r\n         and then from Parent, the same is passed as prop to Display component.\r\n         2. Our display panel should should show the volume level when its changed and then make the panel blank. Then again on pressing any sound button,\r\n        it should show the sound name. To achieve this behaviour, we are sending incremented clickID to compare in Display component whether again any sound button is pressed or not.\r\n        */\r\n\r\n    //Don't playback when power if off\r\n    if (this.props.power == \"off\") {\r\n      return;\r\n    }\r\n\r\n    //Handle runtime error if user presses any other key\r\n    if (\r\n      typeof e.key !== \"undefined\" &&\r\n      ![\"q\", \"w\", \"e\", \"a\", \"s\", \"d\", \"z\", \"x\", \"c\"].includes(String(e.key))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let soundKey =\r\n      typeof e.key !== \"undefined\" ? e.key.toUpperCase() : e.target.innerHTML;\r\n\r\n    const incrementedClickID = Number(this.state.clickID) + 1;\r\n\r\n    this.setState({ clickID: incrementedClickID });\r\n\r\n    this.props.setsoundname({\r\n      soundName: this.state.soundInfo[soundKey].name,\r\n      clickID: incrementedClickID,\r\n    });\r\n\r\n    let audio = new Audio(this.state.soundInfo[soundKey].url);\r\n    audio.volume = this.props.volume / 100;\r\n    audio.play();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Drumpad\" onKeyPress={this.handleKeyPress}>\r\n        <button className=\"d-btn\" onClick={this.handleKeyPress}>\r\n          Q\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          W\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          E\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          A\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          S\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          D\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          Z\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          X\r\n        </button>\r\n        <button\r\n          className=\"d-btn\"\r\n          onClick={this.handleKeyPress}\r\n          onKeyPress={this.handleKeyPress}\r\n        >\r\n          C\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Drumpad;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Display.css\";\r\n\r\nexport class Display extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      power_slider: \"on\",\r\n      displayValue: this.props.soundname,\r\n    };\r\n\r\n    this.togglePowerSlider = this.togglePowerSlider.bind(this);\r\n    this.displayVolumeLevel = this.displayVolumeLevel.bind(this);\r\n  }\r\n\r\n  togglePowerSlider() {\r\n    const setPower = () => {\r\n      this.props.setpower(this.state.power_slider);\r\n    };\r\n\r\n    this.state.power_slider == \"on\"\r\n      ? this.setState({ power_slider: \"off\" }, setPower)\r\n      : this.setState({ power_slider: \"on\" }, setPower);\r\n  }\r\n\r\n  displayVolumeLevel(e) {\r\n    this.setState({ displayValue: `Volume: ${e.target.value}` });\r\n\r\n    this.props.setvolume(e.target.value);\r\n\r\n    setTimeout(() => {\r\n      this.setState({ displayValue: \"\" });\r\n    }, 1500);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({ displayValue: this.props.soundname });\r\n  }\r\n\r\n  /* Our display panel should should show the volume level when its changed and then make the panel blank. Then again on pressing any sound button,\r\n    it should show the sound name. To achieve this behaviour, we are checking  clickID from Display component and displaying sound name if a new button press event is triggered.*/\r\n  componentDidUpdate(prevProp, prevState) {\r\n    if (\r\n      prevProp.soundname.clickID != this.props.soundname.clickID ||\r\n      this.props.soundname.clickID == 0\r\n    ) {\r\n      this.setState({ displayValue: this.props.soundname.soundName });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Display\">\r\n        <div>\r\n          <span className=\"power-label\">Power</span>\r\n          <div\r\n            className=\"power_slider-background\"\r\n            onClick={this.togglePowerSlider}\r\n          >\r\n            <div className={`power_slider-${this.state.power_slider}`}></div>\r\n          </div>\r\n\r\n          {/* Display the sound name coming from Drumpad component via Parent Component */}\r\n          <p className=\"chord-name\">\r\n            {this.state.power_slider == \"on\" ? this.state.displayValue : \"\"}\r\n          </p>\r\n          <div class=\"vol-slider-container\">\r\n            <input\r\n              className=\"volume-slider\"\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              step=\"1\"\r\n              onChange={this.displayVolumeLevel}\r\n              disabled={this.state.power_slider == \"on\" ? \"\" : \"disabled\"}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Display;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./styles/App.css\";\nimport Drumpad from \"./components/Drumpad\";\nimport Display from \"./components/Display\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      soundName: \"\",\n      volume: 50,\n      power: \"on\",\n    };\n\n    this.setSoundName = this.setSoundName.bind(this);\n    this.setVolume = this.setVolume.bind(this);\n    this.setPower = this.setPower.bind(this);\n  }\n\n  setSoundName(input) {\n    this.setState({\n      soundName: input,\n    });\n  }\n\n  setVolume(input) {\n    this.setState({\n      volume: input,\n    });\n  }\n  setPower(input) {\n    this.setState({\n      power: input,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Drumpad\n            setsoundname={this.setSoundName}\n            volume={this.state.volume}\n            power={this.state.power}\n          />\n          <Display\n            soundname={this.state.soundName}\n            setvolume={this.setVolume}\n            setpower={this.setPower}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}